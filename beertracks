#!/usr/bin/env ruby
require 'highline/import'
require_relative 'lib/environment'
require_relative 'lib/argument_parser'
require_relative 'lib/interactions'
require_relative 'lib/logo'

class BeerTracks
  include Interactions
  attr_reader :options

  def initialize

    @options = ArgumentParser.parse
    Environment.environment = @options[:environment] || "production"
  end

  def main
    database = Environment.database_connection

    if options[:command] == "search"
      search_term = ask("What do you want to search for?")
      search_entries_for(search_term)
    elsif options[:command] == "add"
      add_entry()
    elsif options[:command] == "list"
      list_entries()
    elsif options[:command] == "edit"
      if entries = Entries.find(options[:id])
        entries.update(options)
        puts "Entry #{entries.id} is now named #{entries.name}, with #{entries.ounces} ounces and $#{entries.cost} cost."
      else
        puts "Entry #{options[:id]} couldn't be found."
      end
    else
      puts "Command not implemented"
    end
  end


  def list_entries()
    puts "All Entries:"
    puts Entries.all
  end

  def search_entries_for(search_term)
    puts "You asked for: #{search_term}"
    puts Entries.search(search_term)
  end

  def add_entry
    error_messages = ArgumentParser.validate(options)
    options[:style] = get_style()
      if error_messages.empty?
        entry = Entries.new(options)
        entry.save
        puts "Congratulations! You drank #{entry.ounces} oz of #{entry.name} (#{entry.style.name}), costing you $#{entry.cost}."
        # logo
      else
        puts error_messages.join(" ")
      end
    end

    def get_style
      query = "Choose a style:"
      style = Style.all
      style.each_with_index do |style, i|
        query<< "#{i+1}. #{style.name}"
      end
      style_number = ask(query)
      if style_number.empty?
        Style.default
      else
        style[style_number.to_i - 1]
      end
    end
  end

beertracks = BeerTracks.new()
beertracks.main()