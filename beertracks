#!/usr/bin/env ruby
require 'highline/import'
require_relative 'lib/environment'
require_relative 'lib/argument_parser'
require_relative 'lib/interactions'

class BeerTracks
  include Interactions
  attr_reader :options

  def initialize

    @options = ArgumentParser.parse
    Environment.environment = @options[:environment] || "production"
  end

  def main
    database = Environment.database_connection

    if options[:command] == "search"
      search_term = ask("What do you want to search for?")
      search_entries_for(search_term)
    elsif options[:command] == "add"
      error_messages = ArgumentParser.validate(options)
      if error_messages.empty?
        entry = Entries.new(options)
        entry.save
        puts "Congratulations! You drank #{options[:ounces]} oz of #{options[:name]}, costing you $#{options[:cost]}."
        puts "                                                         o
   /^^\\     |----\\     |-----   |-----   |----\\    () .         .
   |  |     |     |    |        |        |     |         .      ()
   |  |     |------\\   |----    |----    |_____
  /~~~~\\    |       |  |        |        |     \\     o
  |    |    |_______|  |______  |______  |     |             ()
  | /\\ |    ---------  _____                                     .
  | PBR|         |     |     \\     / \\    /----\\   |   /   /----\\
  | \\/ |         |     |_____/    /___\\   |        |__/    \\___
  |____|         |     |      \\  /     \\  |        |  \\         \\
                 |     |       \\/       \\ \\_____/  |   \\   \\____/

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
"

        # choose do |menu|
        #   menu.prompt = 'Which kind of the styles above represents this beer?'
        #   menu.choices('Stout', 'Porter', 'Pilsner', "Barley Wine", 'IPA') do |chosen|
        #     options[:style_id] = chosen
        #     case chosen
        #     when 'Stout'
        #       options[:style_id] = 1
        #     when 'Porter'
        #       options[:style_id] = 2
        #     when 'Pilsner'
        #       options[:style_id] = 3
        #     when "Barley Wine"
        #       options[:style_id] = 4
        #     when 'IPA'
        #       options[:style_id] = 5
        #     end
        #   end
        # end
      else
        puts error_messages
      end
    elsif options[:command] == "list"
      list_entries()
    elsif options[:command] == "edit"
      if entries = Entries.find(options[:id])
        entries.update(options)
        puts "Entry #{entries.id} is now named #{entries.name}, with #{entries.ounces} ounces and $#{entries.cost} cost."
      else
        puts "Entry #{options[:id]} couldn't be found."
      end
    else
      puts "Command not implemented"
    end
  end
end

  def list_entries()
    puts "All Entries:"
    puts Entries.all
  end

  def search_entries_for(search_term)
    puts "You asked for: #{search_term}"
    puts Entries.search(search_term)
  end

beertracks = BeerTracks.new()
beertracks.main()
