#!/usr/bin/env ruby
require 'highline/import'
require_relative 'lib/environment'
require_relative 'lib/argument_parser'
require_relative 'lib/interactions'
require_relative 'lib/logo'

class BeerTracks
  include Interactions
  attr_reader :options

  def initialize

    @options = ArgumentParser.parse
    Environment.environment = @options[:environment] || "production"
  end

  def main
    database = Environment.database_connection

    if options[:command] == "search"
      search_term = ask("What beer (by name) do you want to search for?")
      search_entries_for(search_term)
    elsif options[:command] == "add"
      add_entry()
    elsif options[:command] == "list"
      list_entries()
    elsif options[:command] == "edit"
      if entries = Entries.find(options[:id])
        entries.update(options)
        puts "Entry #{entries.id} is now named #{entries.name}, with #{entries.ounces} ounces and $#{entries.cost} cost."
      else
        puts "Entry #{options[:id]} couldn't be found."
      end
    elsif options[:command]== "delete"
      if entries = Entries.find(options[:id])
        entries.delete(options)
        puts "Entry #{entries.id} which was #{entries.name}, with #{entries.ounces} ounces and $#{entries.cost} cost has been deleted."
      else
        puts "Entry #{options[:id]} couldn't be found."
      end
    elsif options[:command] == "total"
      total_cost = add_prices()
      total_cost = sprintf('%.2f', total_cost)
      total_calories = add_calories
      puts "You are $#{total_cost} poorer and #{total_calories} calories fatter. You should drink more water."
      if total_cost.to_f > 100.00 && total_calories.to_f > 10000.00
        puts "You are on your way to being a homeless fatass drunk."
      else
        if total_cost.to_f > 100.00
          puts "You are on your way to being a homeless drunk."
        end
        if total_calories.to_f > 10000.00
          puts "You are a fatass drunk."
        end
      end
    elsif options[:command] == "average"
      average()
    elsif options[:command] == "menu"
      logo
      puts "Welcome to the BeerTracks menu.\nAdd Beer:\n./beertracks add (Name of beer here) --ounces(how many ounces here) --cost(how much you paid here)\n\nSearch specific beer:\n./beertracks search\nYou will then be prompted for the name of the beer.\n\nList your journal entries:\n./beertracks list\n\nEdit an entry:\nFirst, list your entries using list, so that you may find the entry you want to edit by its id.\nEdit:\n./beertracks edit --id(put id here) follow this by what you want to edit (ex. --ounces 40).\n\nTotal:\n./beertracks total\nThis prints out the total money spent and calories based on the style of beer consumed.\n\nAverage:\n./beertracks average\nThis prints out the average abv and the average cost per 12 .oz beer."
    else
      puts "Command not implemented"
    end
  end

  def average()
    entries = Entries.all
    total_abv = 0
    total_cost = 0
    total_ounces = 0
    total_calories = 0
    entries.each do |entry|
      total_abv += entry.style.abv.to_f
      total_cost += entry.cost.to_f
      total_ounces += entry.ounces.to_i
      total_calories += (entry.ounces.to_i * entry.style.calories_per_ounce.to_i)
    end
    average_abv = total_abv / entries.count
    average_abv = sprintf('%.1f', average_abv)

    num_of_twelve_ounce_beers = total_ounces / 12
    average_cost_per_twelve_ounce_beer = total_cost / num_of_twelve_ounce_beers
    average_cost_per_twelve_ounce_beer = sprintf('%.2f', average_cost_per_twelve_ounce_beer)

    average_calories_per_twelve_ounce_beer = total_calories / num_of_twelve_ounce_beers


    puts "Your average beer costs you $#{average_cost_per_twelve_ounce_beer}, adds #{average_calories_per_twelve_ounce_beer} calories to your diet, and has an abv of #{average_abv}%."


  end

  def add_prices()
    entries = Entries.all
    total = 0
    entries.each do |entry|
      total += entry.cost.to_f
    end
    total
  end

  def add_calories()
    entries = Entries.all
    total = 0
    entries.each do |entry|
      total += (entry.ounces.to_i * entry.style.calories_per_ounce.to_i)
    end
    total
  end

  def list_entries()
    puts "All Entries:"
    puts Entries.all
  end

  def search_entries_for(search_term)
    puts "You asked for: #{search_term}"
    puts Entries.search(search_term)

    # entries = Entries.search(search_term)
    # total = 0
    # entries.each do |entry|
    #   total += (ounces.to_i * entry.style.calories_per_ounce.to_i)
    # end
    # puts "#{total} calories"

  end

  def add_entry
    error_messages = ArgumentParser.validate(options)
    options[:style] = get_style()
      if error_messages.empty?
        entry = Entries.new(options)
        entry.save
        this_entry_calories = entry_calories()
        puts "Congratulations! You drank #{entry.ounces} oz of #{entry.name} (#{entry.style.name}), costing you $#{entry.cost}. You just put on approximately #{this_entry_calories} calories."
        logo
      else
        puts error_messages.join(" ")
      end
    end

    def entry_calories
      entry = Entries.new(options)
      total =entry.ounces.to_i * entry.style.calories_per_ounce.to_i
      total
    end

    def get_style
      query = "Choose a style:"
      style = Style.all
      style.each_with_index do |style, i|
        query<< "\n#{i+1}. #{style.name}"
      end
      style_number = ask(query)
      if style_number.empty?
        Style.default
      else
        style[style_number.to_i - 1]
      end
    end
  end

beertracks = BeerTracks.new()
beertracks.main()