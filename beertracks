#!/usr/bin/env ruby

require_relative 'lib/environment'
require_relative 'lib/argument_parser'
require_relative 'lib/interactions'

class BeerTracks
  include Interactions
  attr_reader :options

  def initialize

    @options = ArgumentParser.parse
    Environment.environment = @options[:environment] || "production"
  end

  def main
    database = Environment.database_connection

    if options[:command] == "search"
      search_term = ask("What do you want to search for?")

      puts "You asked for: #{search_term}"
      statement = "select entries.name from entries where name LIKE '%#{search_term}%'"
      results = database.execute(statement)
      puts results
    elsif options[:command] == "add"
      error_messages = ArgumentParser.validate(options)
      if error_messages.empty?
        entry = Entries.new(options)
        entry.save
        puts "I drank #{options[:ounces]} oz of #{options[:name]}, which is a #{options[:style]} style beer, costing me $#{options[:cost]}"
      else
        puts error_messages
      end
    elsif options[:command] == "list"
      puts "All Entries:"
      puts Entries.all

    elsif options[:command] == "edit"
      if entries = Entries.find(options[:id])
        entries.update(options)
        puts "Entry #{entries.id} is now named #{entries.name}, which is a #{entries.style} style, with #{entries.ounces} ounces and $#{entries.cost} cost."
      else
        puts "Entry #{options[:id]} couldn't be found."
      end
    else
      puts "Command not implemented"
    end
  end
end

beertracks = BeerTracks.new()
beertracks.main()
